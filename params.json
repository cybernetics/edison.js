{"name":"EdisonJS","tagline":"Simplifies the organization of complex single-page apps by structuring them as a series of parent (\"section\") <-> child (\"route\") relationships. The result is a simple, clean, and powerful organizational structure.","body":"EdisonJS\r\n=========\r\n\r\nMost JavaScript routing libraries provide little to no guidance in terms of how one might best go about organizing complex single-page applications with many routes. EdisonJS seeks to simplify the organizational structure of complex single-page applications by encouraging developers to organize their applications as a series of parent (\"section\") <-> child (\"route\") relationships. The result is a simple, clean, and powerful organizational structure.\r\n\r\n## Using EdisonJS\r\n\r\n### Creating a New Instance of EdisonJS\r\n\r\nIn this example, we create a new instance of EdisonJS and pass a single option - `container`. Each route that we define will have a template associated with it, and this option determines where those templates are inserted into our document.\r\n\r\n```javascript\r\nvar edison = new Edison({\r\n\t'container': 'route_container'\r\n});\r\n```\r\n\r\n### Creating a Section\r\n\r\nA typical web application is comprised of many different \"routes.\" EdisonJS encourages the developer to group related routes under a parent \"section\" as shown below:\r\n\r\n```javascript\r\nvar users = edison.createSection({\r\n\t'name': 'users', // Determines our URL structure\r\n\t'callback': function() {\r\n\t\tconsole.log(\"Welcome to the 'users' section.\");\r\n\t}\r\n});\r\n```\r\n\r\nWhen a user navigates to a route belonging to the \"users\" section for the first time, the section's callback function will be fired. As the user navigates between routes within the section, this callback function does not continue to fire. As a result, this callback function is useful for performing setup routines that related routes would typically have to perform on their own.\r\n\r\n### Creating a Route\r\n\r\n```javascript\r\nusers.createRoute({\r\n\t'name': 'list', // Determines our URL structure\r\n\t'template': template, // A string containing this route's template\r\n\t'callback': function() {\r\n\t\tconsole.log(\"Welcome to the 'users/list' route.\");\r\n\t}\r\n});\r\n```\r\n\r\nWith our first section and route defined, we can now navigate to the following URL:\r\n\r\n```html\r\nhttp://site.com/#users/list\r\n```\r\n\r\nIn your console, you should now see the following messages:\r\n\r\n```javascript\r\nWelcome to the 'users' section.\r\nWelcome to the 'users/list' route.\r\n```\r\n\r\n### Passing Parameters\r\n\r\nRoutes can accept a single `id` parameter as shown below:\r\n\r\n```javascript\r\n// URL: http://site.com/#users/list/5\r\n\r\nusers.createRoute({\r\n\t'name': 'list',\r\n\t'template': template,\r\n\t'callback': function(id) {\r\n\t\t// id === 5\r\n\t}\r\n});\r\n```\r\n\r\nFor greater flexibility, you can also access query parameters directly, as shown below:\r\n\r\n```javascript\r\n// URL: http://site.com/#users/list?name=Joe\r\n\r\nusers.createRoute({\r\n\t'name': 'list',\r\n\t'template': template,\r\n\t'callback': function() {\r\n\t\tvar name = this.get('name'); // name === 'Joe'\r\n\t}\r\n});\r\n```\r\n\r\n### Extending Sections\r\n\r\nSections can extend their functionality as shown below. As a result, sections can remain organized as they inevitably grow more complex:\r\n\r\n```javascript\r\nvar users = edison.createSection({\r\n\t'name': 'users',\r\n\t'callback': function() {\r\n\t\tthis.doSomething();\r\n\t},\r\n\t'extend': {\r\n\t\t'doSomething': function() {\r\n\t\t\tconsole.log(\"The 'users' section is doing something.\");\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### Extending Routes\r\n\r\nIn a similar manner, routes can also extend their functionality.\r\n\r\n```javascript\r\nusers.createRoute({\r\n\t'name': 'list',\r\n\t'template': template,\r\n\t'callback': function() {\r\n\t\tthis.list();\r\n\t},\r\n\t'extend': {\r\n\t\t'list': function() {\r\n\t\t\tconsole.log('I am listing.');\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\n### Accessing Section Functionality from Routes\r\n\r\nA route can access its parent section as shown below:\r\n\r\n```javascript\r\nvar users = edison.createSection({\r\n\t'name': 'users',\r\n\t'callback': function() {\r\n\t\tthis.day = 'Tuesday';\r\n\t},\r\n\t'extend': {\r\n\t\t'growl': function() {\r\n\t\t\tconsole.log(\"The 'users' section is growling.\");\r\n\t\t}\r\n\t}\r\n});\r\n\r\nusers.createRoute({\r\n\t'name': 'list',\r\n\t'template': template,\r\n\t'callback': function() {\r\n\t\tvar day = this.section.day;\r\n\t\tthis.section.growl();\r\n\t}\r\n});\r\n```\r\n\r\n### Global Section and Route Extensions\r\n\r\nFunctionality shared across all sections and routes throughout the application can be extended globally as shown below:\r\n\r\n```javascript\r\nedison.extend({\r\n\t'request': function() {\r\n\t\t/* All sections and routes can now call: this.request(); */\r\n\t}\r\n});\r\n```\r\n\r\n### Cleanup Routines (Optional)\r\n\r\nIf a section or route is given a `cleanup` method, it will be called when the user navigates to a different section or route. See below:\r\n\r\n```javascript\r\nvar users = edison.createSection({\r\n\t'name': 'users',\r\n\t'callback': function() {\r\n\t},\r\n\t'cleanup': function() {\r\n\t\t// Called when the user leaves this section.\r\n\t}\r\n});\r\n\r\nusers.createRoute({\r\n\t'name': 'list',\r\n\t'template': template,\r\n\t'callback': function() {\r\n\t},\r\n\t'cleanup': function() {\r\n\t\t// Called when the user leaves this route.\r\n\t}\r\n});\r\n```\r\n\r\n### One More Thing\r\n\r\nOnce all of your sections and routes have been defined, you should call the following method:\r\n\r\n```javascript\r\nedison.initRoutes();\r\n```\r\n\r\n## Installation\r\n\r\n### Bower\r\n\r\n```\r\n$ bower install edisonjs\r\n```\r\n\r\n## Configuration\r\n\r\nAdd the following options to your RequireJS configuration (adjust `location` as appropriate):\r\n\r\n```javascript\r\n'packages': [\r\n\t{\r\n\t\t'name': 'edison',\r\n\t\t'location': '/edison/dist/',\r\n\t\t'main': 'edison'\r\n\t}\r\n]\r\n```\r\n\r\n\r\n## License (MIT)\r\n\r\n```\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}